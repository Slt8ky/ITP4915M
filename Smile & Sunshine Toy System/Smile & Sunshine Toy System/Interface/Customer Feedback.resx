<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMIOAADCDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQo4QBUKuEARRnvDEYZ7QVFGe8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAALLRRACq3XgAZvHkKHLhsAwD/lgC4gRsCAAD/AFMs9xZJJvqyRiH4cWIgzwFOJOwAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAN0MAADtG/IAjS17QOysBV86EAS+yjA6jpoQN/omlxIk8v+7ZJKPvoSCD2N0Yg
        +QB3VcQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJZa
        0QBYAP0AbwXpBXYB5QQvAP8A1xXMAAfX3wAK1tdLAdv4+kHGqpr1pwDZ8bIi//CtFP7nnwJzRyT8fkgq
        /P9HI/qmTR7pB04i7gDyKtEAdwHoBXYF6ARqAO8A8MGZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        Af//gBH//8AT///4H////x////////////8=
</value>
  </data>
</root>